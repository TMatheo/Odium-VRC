using System;
using System.Collections.Generic;
using Odium.ButtonAPI.QM;
using Odium.Components;
using Odium.Modules;
using Odium.Odium;
using Odium.Patches;
using Odium.Wrappers;
using UnityEngine;
using VampClient.Api;

namespace Odium.QMPages
{
	// Token: 0x02000021 RID: 33
	internal class Exploits
	{
		// Token: 0x060000F2 RID: 242 RVA: 0x00008218 File Offset: 0x00006418
		private static void NextAnimation()
		{
			Exploits.currentAnimationIndex = (Exploits.currentAnimationIndex + 1) % Exploits.allAnimations.Length;
			string str = Exploits.animationNames[Exploits.currentAnimationIndex];
			OdiumConsole.Log("Animation", "Switched to: " + str, LogLevel.Info);
			ToastBase.Toast("Odium Animation", "Switched to '" + str + "' animation style", PhotonPatches.LogoIcon, 3f);
		}

		// Token: 0x060000F3 RID: 243 RVA: 0x00008284 File Offset: 0x00006484
		private static void PreviousAnimation()
		{
			Exploits.currentAnimationIndex = (Exploits.currentAnimationIndex - 1 + Exploits.allAnimations.Length) % Exploits.allAnimations.Length;
			string str = Exploits.animationNames[Exploits.currentAnimationIndex];
			OdiumConsole.Log("Animation", "Switched to: " + str, LogLevel.Info);
			ToastBase.Toast("Odium Animation", "Switched to '" + str + "' animation style", PhotonPatches.LogoIcon, 3f);
		}

		// Token: 0x060000F4 RID: 244 RVA: 0x000082F8 File Offset: 0x000064F8
		private static string[] GetCurrentAnimation()
		{
			return Exploits.allAnimations[Exploits.currentAnimationIndex];
		}

		// Token: 0x060000F5 RID: 245 RVA: 0x00008318 File Offset: 0x00006518
		public static string[] GenerateBubblePopAnimation()
		{
			List<string> list = new List<string>();
			string text = "Odium Client";
			string str = "[ ";
			string str2 = " ]";
			string item = str + new string('○', text.Length) + str2;
			list.Add(item);
			for (int i = 0; i < text.Length; i++)
			{
				char[] array = new char[text.Length];
				for (int j = 0; j < text.Length; j++)
				{
					bool flag = j < i;
					if (flag)
					{
						array[j] = text[j];
					}
					else
					{
						bool flag2 = j == i;
						if (flag2)
						{
							array[j] = '◌';
						}
						else
						{
							array[j] = '○';
						}
					}
				}
				string item2 = str + new string(array) + str2;
				list.Add(item2);
				array[i] = '★';
				string item3 = str + new string(array) + str2;
				list.Add(item3);
				array[i] = text[i];
				string item4 = str + new string(array) + str2;
				list.Add(item4);
			}
			string item5 = str + text + str2;
			list.Add(item5);
			return list.ToArray();
		}

		// Token: 0x060000F6 RID: 246 RVA: 0x00008474 File Offset: 0x00006674
		public static void InitializePage(QMNestedMenu exploitsButton, Sprite buttonImage)
		{
			Sprite icon = SpriteUtil.LoadFromDisk(Environment.CurrentDirectory + "\\Odium\\Drone.png", 100f);
			new QMToggleButton(exploitsButton, 1f, 0f, "Udon Block", delegate()
			{
				OdiumConsole.Log("Exploits: ", "Udon Block Enabled", LogLevel.Info);
				PhotonPatches.BlockUdon = true;
			}, delegate()
			{
				OdiumConsole.Log("Exploits: ", "Udon Block Disabled", LogLevel.Info);
				PhotonPatches.BlockUdon = false;
			}, "Stops udon from working, remember this will break game worlds", false, buttonImage);
			new QMToggleButton(exploitsButton, 2f, 0f, "Ghost Mode", delegate()
			{
				OdiumConsole.Log("Exploits: ", "Ghost Mode Enabled", LogLevel.Info);
				GhostMode.ToggleGhost(true);
			}, delegate()
			{
				OdiumConsole.Log("Exploits: ", "Ghost Mode Disabled", LogLevel.Info);
				GhostMode.ToggleGhost(false);
			}, "They can't see me like john cena", false, buttonImage);
			new QMToggleButton(exploitsButton, 3f, 0f, "Chatbox Lagger", delegate()
			{
				OdiumConsole.Log("Exploits: ", "Chatbox Lagger Enabled", LogLevel.Info);
				AssignedVariables.chatboxLagger = true;
			}, delegate()
			{
				OdiumConsole.Log("Exploits: ", "Chatbox Lagger Disabled", LogLevel.Info);
				AssignedVariables.chatboxLagger = false;
			}, "Ever wanted to read the bible in chinese?", false, buttonImage);
			new QMToggleButton(exploitsButton, 4f, 0f, "Loud Mic", delegate()
			{
				LoudMic.Activated(true);
			}, delegate()
			{
				LoudMic.Activated(false);
			}, "Makes your microphone loud as hell", false, buttonImage);
			new QMToggleButton(exploitsButton, 1f, 1f, "USpeak Spam", delegate()
			{
				USpeakSpam.ToggleUSpeakSpam(true);
			}, delegate()
			{
				USpeakSpam.ToggleUSpeakSpam(false);
			}, "Makes your microphone loud as hell", false, buttonImage);
			new QMToggleButton(exploitsButton, 2f, 1f, "Anti Quest", delegate()
			{
				bool flag = !PlayerWrapper.LocalPlayer.field_Private_APIUser_0.isSupporter;
				if (flag)
				{
					OdiumBottomNotification.ShowNotification("You need <color=Ffd700>VRC+</color> for this!");
				}
				else
				{
					AssignedVariables.autoDroneCrash = true;
					OdiumBottomNotification.ShowNotification("Anti Quest <color=green>enabled</color>");
				}
			}, delegate()
			{
				bool flag = !PlayerWrapper.LocalPlayer.field_Private_APIUser_0.isSupporter;
				if (flag)
				{
					OdiumBottomNotification.ShowNotification("You need <color=Ffd700>VRC+</color> for this!");
				}
				else
				{
					AssignedVariables.autoDroneCrash = false;
					OdiumBottomNotification.ShowNotification("Anti Quest <color=red>disabled</color>");
				}
			}, "Makes your microphone loud as hell", false, buttonImage);
			new QMSingleButton(exploitsButton, 1f, 3f, "Drone Crash", delegate()
			{
				DroneWrapper.DroneCrash();
			}, "Gay", false, icon, buttonImage);
			Sprite icon2 = SpriteUtil.LoadFromDisk(Environment.CurrentDirectory + "\\Odium\\Skip.png", 100f);
			Sprite icon3 = SpriteUtil.LoadFromDisk(Environment.CurrentDirectory + "\\Odium\\Rewind.png", 100f);
			new QMSingleButton(exploitsButton, 2f, 3f, "Prev Anim", delegate()
			{
				Exploits.PreviousAnimation();
			}, "Previous animation style", false, icon3, buttonImage);
			new QMSingleButton(exploitsButton, 4f, 3f, "Next Anim", delegate()
			{
				Exploits.NextAnimation();
			}, "Next animation style", false, icon2, buttonImage);
			new QMToggleButton(exploitsButton, 3f, 3f, "Chatbox Anim", delegate()
			{
				Chatbox.SendFrameAnimation(Exploits.GetCurrentAnimation(), "odium_animation", null, true, 2f);
			}, delegate()
			{
				Chatbox.CancelFrameEffect("odium_animation");
			}, "Shows " + Exploits.animationNames[Exploits.currentAnimationIndex] + " animation in chat", false, buttonImage);
		}

		// Token: 0x060000F7 RID: 247 RVA: 0x0000881C File Offset: 0x00006A1C
		private static void PreGenerateMessages(int count)
		{
			for (int i = 0; i < count; i++)
			{
				char[] array = new char[144];
				for (int j = 0; j < 144; j++)
				{
					array[j] = (char)Exploits.random.Next(19968, 40960);
				}
				Exploits.preGeneratedMessages.Add(new string(array));
			}
		}

		// Token: 0x060000F8 RID: 248 RVA: 0x00008888 File Offset: 0x00006A88
		public static void UpdateChatboxLagger()
		{
			bool flag = !AssignedVariables.chatboxLagger;
			if (!flag)
			{
				Exploits.chatboxLaggerTimer += Time.deltaTime;
				bool flag2 = Exploits.chatboxLaggerTimer >= Exploits.ChatboxLaggerInterval;
				if (flag2)
				{
					Exploits.chatboxLaggerTimer = 0f;
					int i = 0;
					while (i < 144)
					{
						int num = 0;
						char c;
						do
						{
							c = (char)Exploits.random.Next(19968, 40960);
							num++;
							bool flag3 = num >= 100;
							if (flag3)
							{
								goto Block_3;
							}
						}
						while (Exploits.usedChineseChars.Contains(c));
						IL_97:
						Exploits.usedChineseChars.Add(c);
						Exploits.chineseCharsBuffer[i] = c;
						i++;
						continue;
						Block_3:
						Exploits.usedChineseChars.Clear();
						goto IL_97;
					}
					Chatbox.SendCustomChatMessage(new string(Exploits.chineseCharsBuffer));
				}
			}
		}

		// Token: 0x04000067 RID: 103
		private static List<string> preGeneratedMessages = new List<string>();

		// Token: 0x04000068 RID: 104
		private static Random random = new Random();

		// Token: 0x04000069 RID: 105
		private static object chatboxLaggerCoroutine = null;

		// Token: 0x0400006A RID: 106
		private static int currentAnimationIndex = 0;

		// Token: 0x0400006B RID: 107
		private static readonly string[][] allAnimations = new string[][]
		{
			new string[]
			{
				"⟦ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?",
				"⟦ o⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?",
				"⟦ od⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?",
				"⟦ odi⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?",
				"⟦ odiu⠀⠀⠀⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?",
				"⟦ odium⠀⠀⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?",
				"⟦ odiumv⠀⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?",
				"⟦ odiumvr⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?",
				"⟦ odiumvrc⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?",
				"⟦ odiumvrc.⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?",
				"⟦ odiumvrc.c⠀⠀⠀⟧\nThis can NOT be real\nRight?",
				"⟦ odiumvrc.co⠀⠀⟧\nThis can NOT be real\nRight?",
				"⟦ odiumvrc.com⠀⟧\nThis can NOT be real\nRight?",
				"⟦ odiumvrc.com ⟧\nThis can NOT be real\nRight?"
			},
			new string[]
			{
				"⟦ ██████████████ ⟧",
				"⟦ ▓█████████████ ⟧",
				"⟦ ▒▓████████████ ⟧",
				"⟦ ░▒▓███████████ ⟧",
				"⟦ ⠀░▒▓██████████ ⟧",
				"⟦ ⠀⠀░▒▓█████████ ⟧",
				"⟦ ⠀⠀⠀░▒▓████████ ⟧",
				"⟦ ⠀⠀⠀⠀░▒▓███████ ⟧",
				"⟦ ⠀⠀⠀⠀⠀░▒▓██████ ⟧",
				"⟦ ⠀⠀⠀⠀⠀⠀░▒▓█████ ⟧",
				"⟦ ⠀⠀⠀⠀⠀⠀⠀░▒▓████ ⟧",
				"⟦ ⠀⠀⠀⠀⠀⠀⠀⠀░▒▓███ ⟧",
				"⟦ ⠀⠀⠀⠀⠀⠀⠀⠀⠀░▒▓██ ⟧",
				"⟦ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀░▒▓█ ⟧",
				"⟦ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀░▒ ⟧",
				"⟦ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀░ ⟧",
				"⟦ odiumvrc.com ⟧"
			},
			new string[]
			{
				"⟦ ø∂!ʉɱvɾȼ.ȼøɱ ⟧",
				"⟦ 0d1umvrc.c0m ⟧",
				"⟦ øđɨữmvɾȼ.ȼøm ⟧",
				"⟦ odiumvrc.com ⟧",
				"⟦ ÖÐ1ÛMVRç.çÖM ⟧",
				"⟦ odiumvrc.com ⟧",
				"⟦ ōđįūmvɾč.čōm ⟧",
				"⟦ odiumvrc.com ⟧"
			},
			new string[]
			{
				"⟦ [             ] 0% ⟧",
				"⟦ [▓            ] 8% ⟧",
				"⟦ [▓▓           ] 15% ⟧",
				"⟦ [▓▓▓          ] 23% ⟧",
				"⟦ [▓▓▓▓         ] 31% ⟧",
				"⟦ [▓▓▓▓▓        ] 38% ⟧",
				"⟦ [▓▓▓▓▓▓       ] 46% ⟧",
				"⟦ [▓▓▓▓▓▓▓      ] 54% ⟧",
				"⟦ [▓▓▓▓▓▓▓▓     ] 62% ⟧",
				"⟦ [▓▓▓▓▓▓▓▓▓    ] 69% ⟧",
				"⟦ [▓▓▓▓▓▓▓▓▓▓   ] 77% ⟧",
				"⟦ [▓▓▓▓▓▓▓▓▓▓▓  ] 85% ⟧",
				"⟦ [▓▓▓▓▓▓▓▓▓▓▓▓ ] 92% ⟧",
				"⟦ [▓▓▓▓▓▓▓▓▓▓▓▓▓] 100% ⟧",
				"⟦ odiumvrc.com ⟧"
			},
			new string[]
			{
				"⟦ |   LOADING   | ⟧",
				"⟦ /   LOADING   / ⟧",
				"⟦ —   LOADING   — ⟧",
				"⟦ \\   LOADING   \\ ⟧",
				"⟦ |   LOADING   | ⟧",
				"⟦ /   LOADING   / ⟧",
				"⟦ —   LOADING   — ⟧",
				"⟦ \\   LOADING   \\ ⟧",
				"⟦ odiumvrc.com ⟧"
			},
			new string[]
			{
				"⟦ |⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⟧",
				"⟦ o|⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⟧",
				"⟦ od|⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⟧",
				"⟦ odi|⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⟧",
				"⟦ odiu|⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⟧",
				"⟦ odium|⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⟧",
				"⟦ odiumv|⠀⠀⠀⠀⠀⠀⠀⠀ ⟧",
				"⟦ odiumvr|⠀⠀⠀⠀⠀⠀⠀ ⟧",
				"⟦ odiumvrc|⠀⠀⠀⠀⠀⠀ ⟧",
				"⟦ odiumvrc.|⠀⠀⠀⠀⠀ ⟧",
				"⟦ odiumvrc.c|⠀⠀⠀⠀ ⟧",
				"⟦ odiumvrc.co|⠀⠀⠀ ⟧",
				"⟦ odiumvrc.com|⠀⠀ ⟧",
				"⟦ odiumvrc.com| ⟧",
				"⟦ odiumvrc.com ⟧"
			},
			new string[]
			{
				"⟦ ⠀⠀⠀⠀⠀⠀•⠀⠀⠀⠀⠀⠀ ⟧",
				"⟦ ⠀⠀⠀⠀⠀*⚬*⠀⠀⠀⠀⠀ ⟧",
				"⟦ ⠀⠀⠀⠀*⚬⚹⚬*⠀⠀⠀⠀ ⟧",
				"⟦ ⠀⠀⠀*⚬⚹❋⚹⚬*⠀⠀⠀ ⟧",
				"⟦ ⠀⠀*⚬⚹❋❋❋⚹⚬*⠀⠀ ⟧",
				"⟦ ⠀*⚬⚹❋❋❋❋❋⚹⚬*⠀ ⟧",
				"⟦ *⚬⚹❋❋❋❋❋❋❋⚹⚬* ⟧",
				"⟦ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⟧",
				"⟦ odiumvrc.com ⟧"
			}
		};

		// Token: 0x0400006C RID: 108
		private static readonly string[] animationNames = new string[]
		{
			"Classic",
			"Matrix",
			"Glitch",
			"Loading",
			"Spinner",
			"Typewriter",
			"Explosion"
		};

		// Token: 0x0400006D RID: 109
		private static HashSet<char> usedChineseChars = new HashSet<char>();

		// Token: 0x0400006E RID: 110
		private static char[] chineseCharsBuffer = new char[144];

		// Token: 0x0400006F RID: 111
		private static float chatboxLaggerTimer = 0f;

		// Token: 0x04000070 RID: 112
		private static readonly float ChatboxLaggerInterval = 0.12f;
	}
}
